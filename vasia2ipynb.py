# -*- coding: utf-8 -*-
"""VASIA2ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_QtmmkLgPjU6gnO_virgKjCYnXWT4xek
"""

import numpy as np
from matplotlib import pyplot as plt
import time

start = time.time()

img19h = np.random.rand(700, 700) * 256
img19h = np.expand_dims(img19h, axis=2)
#img19h = np.repeat(img19h, 101, axis=2)

img19v = np.random.rand(700, 700) * 256
img19v = np.expand_dims(img19v, axis=2)
#img19v = np.repeat(img19v, 101, axis=2)

img37h = np.random.rand(700, 700) * 256
img37h = np.expand_dims(img37h, axis=2)
#img37h = np.repeat(img37h, 101, axis=2)

img37v = np.random.rand(700, 700) * 256
img37v = np.expand_dims(img37v, axis=2)
#img37v = np.repeat(img37v, 101, axis=2)

img85h = np.random.rand(700, 700) * 256
img85h = np.expand_dims(img85h, axis=2)
#img85h = np.repeat(img85h, 101, axis=2)

img85v = np.random.rand(700, 700) * 256
img85v = np.expand_dims(img85v, axis=2)
#img85v = np.repeat(img85v, 101, axis=2)

def tan85_37h():
  return (img85h - img37h) / (85.5 - 37)

def tan85_37v():
  return (img85v - img19v) / (85.5 - 37)

def tan85_19h():
  return (img85h - img19h) / (85.5 - 19.35)

def tan85_19v():
  return (img85v - img19v) / (85.5 - 19.35)

def tan37_19h():
  return (img37h - img19h) / (37 - 19.35)

def tan37_19v():
  return (img37v - img19v) / (37 - 19.35)

def f85_37h(I):
  return -0.085 * I + 0.908

def f85_19v(I):
  return -0.86 * I + 0.55

def fi85_37h(I):
  return 0.039 * I + 1.19

def fi85_19v(I):
  return -0.04 * I + 0.7

I = np.arange(0, 101).reshape((1, -1))
# I = np.vstack([I for _ in range(700*700)]).reshape((700,700,101))
#I[0, 0, :10]



def F1(I):
  return 0.5 * ((f85_37h(I) - tan85_37h()) ** 2 / tan85_37h() ** 2 + (f85_19v(I) - tan85_19v()) ** 2 / tan85_19v() ** 2)

def F2(I):
  return 0.5 * ((fi85_37h(I) - tan85_37h()) ** 2 / tan85_37h() ** 2 + (fi85_19v(I) - tan85_19v()) ** 2 / tan85_19v() ** 2)

I1_min = np.argmin(F1(I), axis=2) / 10
I2_min = np.argmin(F2(I), axis=2) / 10
I1_min.shape

def delta37_19(I_min):
  return -0.187 * I_min + 1.1

def tan37_19v_pixel(x37v, x19v):
  return (x37v - x19v) / (37 - 19.35)

def I1_to_I2(i1, i2, tg37_19v):
  if delta37_19(i1) < tg37_19v:
    return i1
  else:
    return i2

vectI1_to_I2 = np.vectorize(I1_to_I2)

result = vectI1_to_I2(I1_min, I2_min, tan37_19v())

result.shape

round(time.time() - start, 2)